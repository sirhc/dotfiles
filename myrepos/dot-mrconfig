[DEFAULT]

lib =
  # Provide for `mr git ...`
  git() {
    command git --no-pager "$@"
  }
  # Provide for `mr gh ...`
  gh() {
    env GH_PAGER= gh "$@"
  }

edit = if [[ "$#" -gt 0 ]]; then vim "$@" else vim . fi

# TODO: Figure out how to tell Tilix to open a tab for Linux.
tab =
  if [[ "$( uname -s )" = Darwin ]]; then
    osascript -e 'tell application "iTerm2" to tell current window' \
              -e '  create tab with default profile' \
              -e '  tell current session to write text "builtin cd '"'$MR_REPO'"'; '"$@"'"' \
              -e 'end tell'
    exit
  fi
  error "unsupported on $( uname -s )"

# Quick access to the git(1) and gh(1) commands.
git_git = git "$@"
git_gh  = gh "$@"

# Some of the more common git(1) commands.
git_branch = git branch "$@"
git_gc     = git gc "$@"
git_switch = git switch "$@"
git_tags   = git tag "$@"

git_checkoutdefaultbranch = git switch "$( git default-branch )"
git_defaultbranch         = git default-branch
git_mergedefaultbranch    = git merge "$( git default-branch )"
git_nondefaultbranch      = git branch | awk '( $1 == "*" ) { print $2 }' | { grep -v "$( git default-branch )" || true; }

# Print the branch information only if there is more than one local branch (assumes a single branch is the default).
git_localbranches =
  branches="$( git branch -vv )"
  if [[ $( wc -l <<< "$branches" ) -gt 1 ]]; then
    echo "$branches"
  fi

# Print any branches that are tracking branches no longer present on the remote.
git_missingbranches =
  git branch -vv | grep ': gone\]' || true

# Override the default `mr update` command for Git to suppress the "Already up to date" message. This will let it play
# nice with `mr -m`.
git_update =
  git pull "$@" | sed -e '/^Already up to date.$/d'

git_latestrelease =
  { gh api 'repos/{owner}/{repo}/releases/latest' 2> /dev/null || true; } | jq -r '.tag_name // empty'

include = cat ~/.mrconfig.d/*.conf 2>/dev/null || :

[ALIAS]
cd = checkoutdefaultbranch
db = defaultbranch
lb = localbranches
md = mergedefaultbranch

[.dotfiles]
checkout = git clone 'https://github.com/sirhc/dotfiles.git' '.dotfiles'
chain    = true

[.vim]
checkout = git clone 'https://github.com/sirhc/vim-profile.git' '.vim'
chain    = true
