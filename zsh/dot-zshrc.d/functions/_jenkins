#compdef jenkins

__job_names() {
    [[ -n "$JENKINS_URL" ]] || return
    compadd $( jenkins list-jobs )
}

__build_numbers() {
    [[ -n "$JENKINS_URL" ]] || return

    local _job
    local _builds

    _job=$words[CURRENT-1]
    _builds=("${(@f)$( jenkins get-builds "$_job" -f json | jq -r '.[] | "\(.number):\(.displayName) (\(.result))"' )}")

    _describe -t builds 'job builds' _builds
}

__branch_names() {
    [[ "$( git rev-parse --is-inside-work-tree 2> /dev/null )" == 'true' ]] || return
    compadd $( git for-each-ref --format='%(refname:short)' refs/heads/ )
}

local -a _jenkins_cmds opt_args
_jenkins_cmds=(
    'add-job-to-view:Adds jobs to view'
    'apply-configuration:Apply YAML configuration to instance'
    'build:Builds a job, and optionally waits until its completion'
    'cancel-quiet-down:Cancel the effect of the "quiet-down" command'
    'check-configuration:Check YAML configuration to instance'
    'clear-queue:Clears the build queue'
    'connect-node:Reconnect to a node(s)'
    'console:Retrieves console output of a build'
    'copy-job:Copies a job'
    'create-credentials-by-xml:Create Credential by XML'
    'create-credentials-domain-by-xml:Create Credentials Domain by XML'
    'create-job:Creates a new job by reading stdin as a configuration XML file'
    'create-node:Creates a new node by reading stdin as a XML configuration'
    'create-view:Creates a new view by reading stdin as a XML configuration'
    'declarative-linter:Validate a Jenkinsfile containing a Declarative Pipeline'
    'delete-builds:Deletes build record(s)'
    'delete-credentials:Delete a Credential'
    'delete-credentials-domain:Delete a Credentials Domain'
    'delete-job:Deletes job(s)'
    'delete-node:Deletes node(s)'
    'delete-view:Deletes view(s)'
    'disable-job:Disables a job'
    'disable-plugin:Disable one or more installed plugins'
    'disconnect-node:Disconnects from a node'
    'enable-job:Enables a job'
    'enable-plugin:Enables one or more installed plugins transitively'
    'export-configuration:Export jenkins configuration as YAML'
    'get-branch:Get the branch specifier for a job'
    'get-credentials-as-xml:Get a Credentials as XML (secrets redacted)'
    'get-credentials-domain-as-xml:Get a Credentials Domain as XML'
    'get-gradle:List available gradle installations'
    'get-job:Dumps the job definition XML to stdout'
    'get-node:Dumps the node definition XML to stdout'
    'get-parameters:Dumps the job parameters to stdout'
    'get-url:Print the job URL to stdout'
    'get-view:Dumps the view definition XML to stdout'
    'groovy:Executes the specified Groovy script'
    'groovysh:Runs an interactive groovy shell'
    'help:Lists all the available commands or a detailed description of single command'
    'import-credentials-as-xml:Import credentials as XML. The output of "list-credentials-as-xml" can be used as input here as is, the only needed change is to set the actual Secrets which are redacted in the output'
    'install-plugin:Installs a plugin either from a file, an URL, or from update center'
    'keep-build:Mark the build to keep the build forever'
    'list-changes:Dumps the changelog for the specified build(s)'
    'list-credentials:Lists the Credentials in a specific Store'
    'list-credentials-as-xml:Export credentials as XML. The output of this command can be used as input for "import-credentials-as-xml" as is, the only needed change is to set the actual Secrets which are redacted in the output'
    'list-credentials-context-resolvers:List Credentials Context Resolvers'
    'list-credentials-providers:List Credentials Providers'
    'list-jobs:Lists all jobs in a specific view or item group'
    'list-plugins:Outputs a list of installed plugins'
    'mail:Reads stdin and sends that out as an e-mail'
    'offline-node:Stop using a node for performing builds temporarily, until the next "online-node" command'
    'online-node:Resume using a node for performing builds, to cancel out the earlier "offline-node" command'
    'open:Opens Jenkins in your web browser'
    'quiet-down:Quiet down Jenkins, in preparation for a restart. Donâ€™t start any builds'
    'refresh:Builds a job with ONLY_UPDATE_PIPELINE set, and optionally waits until its completion'
    'reload-configuration:Discard all the loaded data in memory and reload everything from file system. Useful when you modified config files directly on disk'
    'reload-jcasc-configuration:Reload JCasC YAML configuration'
    'reload-job:Reload job(s)'
    'remove-job-from-view:Removes jobs from view'
    'replay-pipeline:Replay a Pipeline build with edited script taken from standard input'
    'restart:Restart Jenkins'
    'restart-from-stage:Restart a completed Declarative Pipeline build from a given stage'
    'safe-restart:Safely restart Jenkins'
    'safe-shutdown:Puts Jenkins into the quiet mode, wait for existing builds to be completed, and then shut down Jenkins'
    'session-id:Outputs the session ID, which changes every time Jenkins restarts'
    'set-build-description:Sets the description of a build'
    'set-build-display-name:Sets the displayName of a build'
    'set-branch:Sets the branch specifier of a job'
    'shutdown:Immediately shuts down Jenkins server'
    'stop-builds:Stop all running builds for job(s)'
    'update-credentials-by-xml:Update Credentials by XML'
    'update-credentials-domain-by-xml:Update Credentials Domain by XML'
    'update-jar:Downloads the jenkins-cli.jar file from the Jenkins server'
    'update-job:Updates the job definition XML from stdin. The opposite of the get-job command'
    'update-node:Updates the node definition XML from stdin. The opposite of the get-node command'
    'update-view:Updates the view definition XML from stdin. The opposite of the get-view command'
    'version:Outputs the current version'
    'wait-node-offline:Wait for a node to become offline'
    'wait-node-online:Wait for a node to become online'
    'who-am-i:Reports your credential and permissions'
)

__build() {
    _arguments \
        ':job:__job_names' \
        '-c[check for SCM changes before starting build]' \
        '-f[follow the build progress]' \
        '-p[specify build parameter]:' \
        '-P[specify build parameter file]:parameters:_files' \
        '-s[wait until completion/abortion of command]' \
        '-v[print the console output]' \
        '-w[wait until start of command]'
}

__get_branch() {
    _arguments \
        ':job:__job_names'
}

__get_job() {
    _arguments \
        ':job:__job_names'
}

__get_parameters() {
    _arguments \
        ':job:__job_names'
}

__get_url() {
    _arguments \
        ':job:__job_names'
}

__open() {
    _arguments \
        ':job:__job_names' \
        ':build:__build_numbers'
}

__refresh() {
    _arguments \
        ':job:__job_names'
}

__set_branch() {
    _arguments \
        ':job:__job_names' \
        ':branch:__branch_names'
}

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
    _describe -t commands 'jenkins command' _jenkins_cmds
    return
fi

local -a _command_args
case "$words[1]" in
    build) __build ;;
    get-branch) __get_branch ;;
    get-job) __get_job ;;
    get-parameters) __get_parameters ;;
    get-url) __get_url ;;
    open) __open ;;
    refresh) __refresh ;;
    set-branch) __set_branch ;;
esac
