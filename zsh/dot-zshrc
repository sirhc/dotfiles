# vim: ft=zsh nospell

typeset -aU path manpath fpath

path=(/usr/local/bin /usr/local/sbin)
path=($path /usr/bin)
[[ ! -L /bin ]] && path=($path /bin) # /bin and /sbin are symlinks on Fedora
path=($path /usr/sbin)
[[ ! -L /sbin ]] && path=($path /sbin)
[[ -d /opt/homebrew/sbin ]] && path=(/opt/homebrew/sbin $path)
[[ -d /opt/homebrew/bin ]] && path=(/opt/homebrew/bin $path)

for _env in ~/.*env(/); do
    [[ -d $_env/bin ]] && path=($_env/bin $path)
    [[ -d $_env/shims ]] && path=($_env/shims $path)
done
unset _env

path=(
    ~/bin
    # This is a habit from a time when my home directory was on NFS and shared on
    # multiple types of systems. It still comes in handy when I want to keep
    # binaries in `~/bin`, which I tend to sync between systems.
    ~/bin/${OSTYPE/[0-9]*/}-${CPUTYPE} # e.g., linux-gnu-x86_64, darwin-arm64
    ~/.local/bin
    $path
)

[[ -d /opt/homebrew/share/zsh/site-functions ]] && fpath=(/opt/homebrew/share/zsh/site-functions $fpath)
fpath=(~/.zshrc.d/functions ~/.local/share/zsh/site-functions $fpath) # in front, to override packaged functions

# See zshparam(1).
HISTFILE=~/.zsh_history
HISTORY_IGNORE='(exit|reset|clear|cd|cd ..|cd..|ls)'
HISTSIZE=1000000    # the number of items for the internal history list
LISTMAX=0           # only prompt if the list will scroll
#REPORTMEMORY=102400 # report on commands exceeding 100 MiB RSS
REPORTTIME=5        # report on commands exceeding 5 s exec time
SAVEHIST=1000000    # maximum number of items for the history file
TIMEFMT="${TIMEFMT} %Mk max rss"

# See zshoptions(1).
setopt AUTO_CD                 # change directories without cd
setopt EXTENDED_GLOB           # use #, ~, ^ for filename generation
setopt EXTENDED_HISTORY        # record command start time
setopt HIST_FCNTL_LOCK         # use fcntl to lock history file
setopt HIST_IGNORE_ALL_DUPS    # do not add duplicate command to history
setopt HIST_IGNORE_SPACE       # do not add commands with leading space to history
setopt HIST_NO_STORE           # do not store the `history` command
setopt HIST_REDUCE_BLANKS      # remove superfluous blanks
setopt HIST_SAVE_NO_DUPS       # do not save duplicate commands
setopt HIST_VERIFY             # confirm history expansion before executing
setopt INC_APPEND_HISTORY_TIME # append command to history file immediately after execution
setopt INTERACTIVE_COMMENTS    # allow comments even in interactive shells

unsetopt CASE_GLOB # case-insensitive file globbing
unsetopt NOMATCH   # leave unmatched patterns alone in arg list

export ANSIBLE_COW_SELECTION=random
export AWS_PAGER=
export BC_ENV_ARGS="-lq $HOME/.bcrc"
export CLICOLOR=1 # colorize ls(1) on Darwin
export EDITOR=vim
export GREP=egrep
export LESS='-# 4 -c -I -j 10 -M -R -S'
export MAN_POSIXLY_CORRECT=1
export NPM_PACKAGES="$HOME/.local"
export PAGER=less
export PERLDOC_PAGER=less
export RSYNC_RSH=ssh
export TZ=US/Pacific
export UNZIP=-qq

autoload -U compinit && compinit

ZLE_REMOVE_SUFFIX_CHARS=$' \t\n'

zstyle ':completion:*' accept-exact-dirs true
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' menu select

# Only load bracketed-paste-magic if the zsh version is >= 5.1 (unlikely, but
# safety first).
if [[ ${ZSH_VERSION:0:3} -ge 5.1 ]]; then
    set zle_bracketed_paste
    autoload -Uz bracketed-paste-magic
    zle -N bracketed-paste bracketed-paste-magic
fi

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh
[[ -f ~/.zshrc.d/powerlevel10k/powerlevel10k.zsh-theme ]] && source ~/.zshrc.d/powerlevel10k/powerlevel10k.zsh-theme

# Rudimentary plugin autoloading (à la Vim), but serves my purposes at the moment.

for _plugin in ~/.zshrc.d/plugins/*/*.plugin.zsh; do
    source $_plugin
done
unset _plugin

# _set_terminal_title <window-title> [tab-title]
_set_terminal_title() {
    : ${1=%n@%M:%~} # user@host:path
    : ${2=%n@%M:%~} # user@host:path

    if [[ $TERM_PROGRAM == iTerm.app ]]; then
        print -Pn "\e]2;${1:q}\a" # set window name
        print -Pn "\e]1;${2:q}\a" # set tab name
        return
    fi

    case "$TERM" in
        xterm*)
            print -Pn "\e]2;${1:q}\a" # set window name (this is the only one that works in gnome-terminal)
            print -Pn "\e]1;${2:q}\a" # set tab name
            ;;
        screen*|tmux*)
            print -Pn "\ek${1:q}\e\\" # set screen hardstatus
            ;;
    esac
}

_set_terminal_title_cmd() {
    _set_terminal_title "%100>...>${2:gs/%/%%}%<< (%~)"
}

autoload -Uz add-zsh-hook
add-zsh-hook precmd _set_terminal_title
add-zsh-hook preexec _set_terminal_title_cmd

# https://github.com/ohmyzsh/ohmyzsh/blob/master/lib/completion.zsh
expand-or-complete-with-dots() {
  local dots='%F{red}…%f'
  printf '\e[?7l%s\e[?7h' "${(%)dots}"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey -M emacs '^I' expand-or-complete-with-dots
bindkey -M viins '^I' expand-or-complete-with-dots
bindkey -M vicmd '^I' expand-or-complete-with-dots

autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search

zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

bindkey '^[[A' up-line-or-beginning-search   # up arrow
bindkey '^[[B' down-line-or-beginning-search # down arrow

bindkey -M vicmd 'k' up-line-or-beginning-search
bindkey -M vicmd 'j' down-line-or-beginning-search

bindkey -M viins '^K' up-line-or-beginning-search
bindkey -M viins '^J' down-line-or-beginning-search

bindkey ' ' magic-space

bindkey '^ ' autosuggest-accept # https://github.com/zsh-users/zsh-autosuggestions#key-bindings

(( $+commands[mcfly] )) && eval "$(mcfly init zsh)"    # https://github.com/cantino/mcfly
(( $+commands[thefuck] )) && eval "$(thefuck --alias)" # warning, this is slow

# If ~/.zsh_history has reached 80% of SAVEHIST, copy it to a snapshot. Let
# zsh take care of pruning the history.
#(( $(wc -l ~/.zsh_history | cut -d' ' -f1) > (SAVEHIST * 0.8) )) && cp ~/.zsh_history ~/.zsh_history.$(date +%Y%m%d%H%M%S)

# Finally, any machine-specific configuration that doesn't belong in my version
# controlled file.
[[ -e ~/.zshrc.local ]] && source ~/.zshrc.local

# If the last command in this file fails (e.g., if ~/.zshrc.local doesn't
# exit), it will cause the p10k prompt to go red. This is just to make it
# happy when a new shell is launched. Alternatively, I could use `if ...;
# then`, but I like the one-liner.
true
